/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class NewTreeNode{
    TreeNode node;
    int pos;
    
    NewTreeNode(TreeNode node, int pos){
        this.node=node;
        this.pos=pos;
    }
}
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        if(root==null) return 0;
        
        Queue<NewTreeNode> queue =new LinkedList<NewTreeNode>();
        queue.offer(new NewTreeNode(root,0));
        int width=1;
        while(!queue.isEmpty()){
            int size=queue.size();
            int min=Integer.MAX_VALUE,max=0;
            for(int i=0;i<size;i++){
                NewTreeNode node=queue.poll();
                
                if(i == 0) min = node.pos;
                if(i == size - 1) max = node.pos;
                
                if(node.node.left!=null){
                    queue.offer(new NewTreeNode(node.node.left,(node.pos * 2)+1));
                   
                }
                if(node.node.right!=null){
                    queue.offer(new NewTreeNode(node.node.right,(node.pos * 2)+2));
                    
                }
                 
            }
            width=max-min +1>width ?max-min +1:width;
                       
            
        }
        return width;
        
    }
}
