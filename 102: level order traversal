/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        
//         if(root==null) return new ArrayList<List<Integer>>();
//         Queue<TreeNode> queue=new LinkedList<TreeNode>();
        
//         queue.offer(root);
//         queue.offer(null);
//         List<Integer> list=new ArrayList<Integer>();
//         List<List<Integer>> list2=new ArrayList<List<Integer>>();
//         while(!queue.isEmpty()){
//             TreeNode node=queue.poll();
//             if( node !=null ){
//                 list.add(node.val);
//                 if(node.left!=null){
//                     queue.offer(node.left);}
//                 if(node.right!=null)  {
//                     queue.offer(node.right);}
                 
//             }
//             else
//             { 
                
//                 if(!queue.isEmpty())
//                 {
//                 list2.add(list);
//                 queue.offer(null);
//                 list=new ArrayList<Integer>(); 
//                 }
//                 else
//                 {
//                     list2.add(list);
//                     queue=new LinkedList<TreeNode>();
//                 }
//             }
            
            
//         }
//         return list2;
        if(root ==null) return new ArrayList<List<Integer>>();
        Queue<TreeNode> queue=new LinkedList<TreeNode>();
       List<List<Integer>> list=new ArrayList<List<Integer>>();
        
        
       queue.offer(root); 
        while(!queue.isEmpty()){
        List<Integer> list2=new ArrayList<Integer>();
            int n=queue.size();
        for(int i=0; i<n;i++){
            TreeNode node=queue.poll();
           if(node.left!=null) queue.offer(node.left);
           if(node.right!=null) queue.offer(node.right);
            
            list2.add(node.val);
        }
        list.add(list2);
      list2=new ArrayList<Integer>();
        }
        return list;
    }
    
}
